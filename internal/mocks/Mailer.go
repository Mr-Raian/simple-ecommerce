// Code generated by MockGen. DO NOT EDIT.
// Source: api/internal/handler (interfaces: Mailer)

// Package mocks is a generated GoMock package.
package mocks

import (
	data "api/internal/data"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMailer) Send(arg0 context.Context, arg1 *data.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMailerMockRecorder) Send(arg0, arg1 interface{}) *MailerSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMailer)(nil).Send), arg0, arg1)
	return &MailerSendCall{Call: call}
}

// MailerSendCall wrap *gomock.Call
type MailerSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MailerSendCall) Return(arg0 error) *MailerSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MailerSendCall) Do(f func(context.Context, *data.Email) error) *MailerSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MailerSendCall) DoAndReturn(f func(context.Context, *data.Email) error) *MailerSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
