// Code generated by MockGen. DO NOT EDIT.
// Source: api/internal/data (interfaces: DataAccesor)

// Package mocks is a generated GoMock package.
package mocks

import (
	data "api/internal/data"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockDataAccesor is a mock of DataAccesor interface.
type MockDataAccesor struct {
	ctrl     *gomock.Controller
	recorder *MockDataAccesorMockRecorder
}

// MockDataAccesorMockRecorder is the mock recorder for MockDataAccesor.
type MockDataAccesorMockRecorder struct {
	mock *MockDataAccesor
}

// NewMockDataAccesor creates a new mock instance.
func NewMockDataAccesor(ctrl *gomock.Controller) *MockDataAccesor {
	mock := &MockDataAccesor{ctrl: ctrl}
	mock.recorder = &MockDataAccesorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataAccesor) EXPECT() *MockDataAccesorMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockDataAccesor) CreateOrder(arg0 context.Context, arg1 uuid.UUID, arg2 uint, arg3 data.Checkout, arg4 data.PaymentMethod, arg5 string) (data.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(data.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockDataAccesorMockRecorder) CreateOrder(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *DataAccesorCreateOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockDataAccesor)(nil).CreateOrder), arg0, arg1, arg2, arg3, arg4, arg5)
	return &DataAccesorCreateOrderCall{Call: call}
}

// DataAccesorCreateOrderCall wrap *gomock.Call
type DataAccesorCreateOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DataAccesorCreateOrderCall) Return(arg0 data.Order, arg1 error) *DataAccesorCreateOrderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DataAccesorCreateOrderCall) Do(f func(context.Context, uuid.UUID, uint, data.Checkout, data.PaymentMethod, string) (data.Order, error)) *DataAccesorCreateOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DataAccesorCreateOrderCall) DoAndReturn(f func(context.Context, uuid.UUID, uint, data.Checkout, data.PaymentMethod, string) (data.Order, error)) *DataAccesorCreateOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConfigByKey mocks base method.
func (m *MockDataAccesor) GetConfigByKey(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigByKey", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigByKey indicates an expected call of GetConfigByKey.
func (mr *MockDataAccesorMockRecorder) GetConfigByKey(arg0, arg1 interface{}) *DataAccesorGetConfigByKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigByKey", reflect.TypeOf((*MockDataAccesor)(nil).GetConfigByKey), arg0, arg1)
	return &DataAccesorGetConfigByKeyCall{Call: call}
}

// DataAccesorGetConfigByKeyCall wrap *gomock.Call
type DataAccesorGetConfigByKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DataAccesorGetConfigByKeyCall) Return(arg0 string, arg1 error) *DataAccesorGetConfigByKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DataAccesorGetConfigByKeyCall) Do(f func(context.Context, string) (string, error)) *DataAccesorGetConfigByKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DataAccesorGetConfigByKeyCall) DoAndReturn(f func(context.Context, string) (string, error)) *DataAccesorGetConfigByKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetConn mocks base method.
func (m *MockDataAccesor) GetConn() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// GetConn indicates an expected call of GetConn.
func (mr *MockDataAccesorMockRecorder) GetConn() *DataAccesorGetConnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockDataAccesor)(nil).GetConn))
	return &DataAccesorGetConnCall{Call: call}
}

// DataAccesorGetConnCall wrap *gomock.Call
type DataAccesorGetConnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DataAccesorGetConnCall) Return(arg0 *sqlx.DB) *DataAccesorGetConnCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DataAccesorGetConnCall) Do(f func() *sqlx.DB) *DataAccesorGetConnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DataAccesorGetConnCall) DoAndReturn(f func() *sqlx.DB) *DataAccesorGetConnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetItemByID mocks base method.
func (m *MockDataAccesor) GetItemByID(arg0 context.Context, arg1 string, arg2 ...string) (data.Item, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItemByID", varargs...)
	ret0, _ := ret[0].(data.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByID indicates an expected call of GetItemByID.
func (mr *MockDataAccesorMockRecorder) GetItemByID(arg0, arg1 interface{}, arg2 ...interface{}) *DataAccesorGetItemByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByID", reflect.TypeOf((*MockDataAccesor)(nil).GetItemByID), varargs...)
	return &DataAccesorGetItemByIDCall{Call: call}
}

// DataAccesorGetItemByIDCall wrap *gomock.Call
type DataAccesorGetItemByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DataAccesorGetItemByIDCall) Return(arg0 data.Item, arg1 error) *DataAccesorGetItemByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DataAccesorGetItemByIDCall) Do(f func(context.Context, string, ...string) (data.Item, error)) *DataAccesorGetItemByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DataAccesorGetItemByIDCall) DoAndReturn(f func(context.Context, string, ...string) (data.Item, error)) *DataAccesorGetItemByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrderByID mocks base method.
func (m *MockDataAccesor) GetOrderByID(arg0 context.Context, arg1 string, arg2 ...string) (data.Order, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrderByID", varargs...)
	ret0, _ := ret[0].(data.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockDataAccesorMockRecorder) GetOrderByID(arg0, arg1 interface{}, arg2 ...interface{}) *DataAccesorGetOrderByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockDataAccesor)(nil).GetOrderByID), varargs...)
	return &DataAccesorGetOrderByIDCall{Call: call}
}

// DataAccesorGetOrderByIDCall wrap *gomock.Call
type DataAccesorGetOrderByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DataAccesorGetOrderByIDCall) Return(arg0 data.Order, arg1 error) *DataAccesorGetOrderByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DataAccesorGetOrderByIDCall) Do(f func(context.Context, string, ...string) (data.Order, error)) *DataAccesorGetOrderByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DataAccesorGetOrderByIDCall) DoAndReturn(f func(context.Context, string, ...string) (data.Order, error)) *DataAccesorGetOrderByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveContactForm mocks base method.
func (m *MockDataAccesor) SaveContactForm(arg0 context.Context, arg1 *data.ContactForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContactForm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContactForm indicates an expected call of SaveContactForm.
func (mr *MockDataAccesorMockRecorder) SaveContactForm(arg0, arg1 interface{}) *DataAccesorSaveContactFormCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContactForm", reflect.TypeOf((*MockDataAccesor)(nil).SaveContactForm), arg0, arg1)
	return &DataAccesorSaveContactFormCall{Call: call}
}

// DataAccesorSaveContactFormCall wrap *gomock.Call
type DataAccesorSaveContactFormCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DataAccesorSaveContactFormCall) Return(arg0 error) *DataAccesorSaveContactFormCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DataAccesorSaveContactFormCall) Do(f func(context.Context, *data.ContactForm) error) *DataAccesorSaveContactFormCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DataAccesorSaveContactFormCall) DoAndReturn(f func(context.Context, *data.ContactForm) error) *DataAccesorSaveContactFormCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateOrder mocks base method.
func (m *MockDataAccesor) UpdateOrder(arg0 context.Context, arg1 data.Order, arg2 data.Where, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrder", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockDataAccesorMockRecorder) UpdateOrder(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *DataAccesorUpdateOrderCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockDataAccesor)(nil).UpdateOrder), varargs...)
	return &DataAccesorUpdateOrderCall{Call: call}
}

// DataAccesorUpdateOrderCall wrap *gomock.Call
type DataAccesorUpdateOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DataAccesorUpdateOrderCall) Return(arg0 error) *DataAccesorUpdateOrderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DataAccesorUpdateOrderCall) Do(f func(context.Context, data.Order, data.Where, ...string) error) *DataAccesorUpdateOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DataAccesorUpdateOrderCall) DoAndReturn(f func(context.Context, data.Order, data.Where, ...string) error) *DataAccesorUpdateOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
